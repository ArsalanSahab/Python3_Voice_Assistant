############################
# Essential Libararies 
############################

import time 
import playsound
import os
import random

import speech_recognition as sr
import webbrowser as browser 



from gtts import gTTS
from time import ctime


##########################
# Initializations
##########################

# initializing the recognizer from speech_recognition

recognizer = sr.Recognizer()



##########################
# Functions
##########################


# Main Assitant Reply Function
    # Arguments : string_audio - String Generated by get_response function

def speak(string_audio ):


    # Intitialize gTTS

    tts = gTTS(text = string_audio , lang='en')

    # Generate a random integer to use for storing audio files
    rand_num = random.randint(1,50000)

    # Generate Audio File , Play File , Delete File
    audio_file = 'audio-' + str(rand_num)  + '.mp3'

    tts.save(audio_file)

    playsound.playsound(audio_file)

    print(string_audio)

    os.remove(audio_file)



# Primary Function To Record Audio Process
    # Arguments : ask_user - optional argument to ask user for more info

def get_audio(ask_user = False):

    # Initializing the microphone as audio source 
    with sr.Microphone() as source :

        if ask_user :

             speak(ask_user)

        # Store the user input in audio variable , using recognizers listen() command
        user_audio = recognizer.listen(source) 
        
        # Initialise voice varibale to store converted string
        voice_audio = ''

        try :
            # Convert to speech using Google Text To Speech
            voice_audio = recognizer.recognize_google(user_audio)

        # Handle Exception if Audio is not recognizeable
        except sr.UnknownValueError :

             speak("Sorry I dint get that , can you please repeat ?")
        
        # Handle Exception if error in service
        except sr.RequestError :

             speak("Sorry , there was an error with google services.")

        return voice_audio




# Function to return respose , in accordance with users input.
    # Arguments : voice_audio - audio recognised by the gTTS 

def get_response(voice_audio):

    # Static Commands for Basic Reponse

    if 'what is your name' in voice_audio :
         speak("My name is Assistant")

    if 'what is the time' in voice_audio :

         speak(ctime())

    if 'search' in voice_audio :

        search_audio = get_audio("What should i search for ?")

        # use webbrowser to search the user input on google
        google_url = 'https://www.google.com/search?q=' + search_audio
        browser.get().open(google_url)

    if 'quit' in voice_audio :

        exit()



# Main Driver Function
    # Arguments : None

def main():

    time.sleep(1)f speak("Hello!")
    while 2 :

        voice_audio = get_audio()
        get_response(voice_audio)




if __name__ == "__main__":

    main()












        
